{"version":3,"file":"static/webpack/static/development/pages/channel.js.426468d44431586b48d5.hot-update.js","sources":["webpack:///./components/PodcastPlayer.js","webpack:///./pages/channel.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'next/link';\n\nconst PodcastPlayer = (props) => {\n\tconst { clip, onClose } = props\n\n\treturn (\n\t\t<div className='clip'>\n\t\t\t<nav>\n\t\t\t\t{\n\t\t\t\tonClose ? \n\t\t\t\t\t<a onClick={onClose}>&lt; Volver</a>\n\t\t\t\t:\n\t\t\t\t\t<Link href={`/channel?id=${clip.channel.id}`}>\n\t\t\t\t\t\t<a className='close'>&lt; Volver</a>\n\t\t\t\t\t</Link>\n\t\t\t\t}\n\t\t\t</nav>\n\n\t\t\t<picture>\n\t\t\t\t<div style={{ backgroundImage: `url(${clip.urls.image || clip.channel.urls.logo_image.original})` }} />\n\t\t\t</picture>\n\n\t\t\t<div className='player'>\n\t\t\t\t<h3>{ clip.title }</h3>\n\t\t\t\t<h6>{ clip.channel.title }</h6>\n\t\t\t\t<audio controls autoPlay={true} volume=\"0.5\">\n\t\t\t\t\t<source src={clip.urls.high_mp3} type='audio/mpeg'/>\n\t\t\t\t\tYour browser does not support the audio tag.\n\t\t\t\t</audio>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default PodcastPlayer","import Layout from '../components/Layout';\nimport LatestPodcastsWithClick from '../components/LatestPodcastsWithClick';\nimport SeriesGrid from '../components/SeriesGrid';\nimport Error from './_error';\nimport PodcastPlayer from '../components/PodcastPlayer';\n\nexport default class extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      openPodcast: null\n    }\n  }\n\n  static async getInitialProps({query, res}){\n    let idChannel = query.id\n\n    try{\n      let  [reqChannel, reqSeries, reqAudios] = await Promise.all([\n        fetch(`https://api.audioboom.com/channels/${idChannel}`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n        fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`)\n      ])\n\n      if(reqChannel.status >= 404) {\n        res.statusCode = reqChannel.status\n        return { channel: null, audioClips: null, series: null, statusCode: reqChannel.status}\n      }\n\n      let dataChannel = await reqChannel.json()\n      let channel = dataChannel.body.channel\n\n      \n      let dataAudios = await reqAudios.json()\n      let audioClips = dataAudios.body.audio_clips\n          \n      let dataSeries = await reqSeries.json()\n      let series = dataSeries.body.channels\n      \n      return { channel , audioClips, series, statusCode: 200 }\n    } catch(e) {\n      // res.statusCode = 503\n      return { channel: null, audioClips: null, series: null, statusCode: 503}\n    }\n  }\n\n  openPodcast = (event, podcast) => {\n    event.preventDefault()\n    this.setState({\n      openPodcast: podcast\n    })\n  }\n\n  closePodcast = (event) => {\n    event.preventDefault()\n    this.setState({\n      openPodcast: null\n    })\n  }\n\n  render() {\n    const { channel, audioClips, series, statusCode } = this.props\n    const { openPodcast } = this.state\n\n    if (statusCode !== 200){\n      return <Error statusCode={ statusCode }/>\n    }\n\n    return (\n      <Layout title={`Channel '${channel.title}'`}>\n\n        <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n\n        { openPodcast && \n          <div className=\"modal\">\n            <PodcastPlayer clip={ openPodcast } onClose={ this.closePodcast }/>\n          </div> \n        }\n        <h1>{ channel.title }</h1>\n\n        <SeriesGrid series={series} />\n\n        <LatestPodcastsWithClick audioClips={audioClips} onClickPodcast={this.openPodcast}/>\n\n        <style jsx>\n        {`        \n        .banner {\n          width: 100%;\n          padding-bottom: 25%;\n          background-position: 50% 50%;\n          background-size: cover;\n          background-color: #aaa;\n        }      \n        h1 {\n          font-weight: 600;\n          padding: 15px;\n        }\n        .modal {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          z-index: 99999;\n        }\n        `}\n        </style>       \n      </Layout>\n    )\n  }\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAwCA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA7CA;AA+CA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAlDA;AACA;AADA;AAFA;AAKA;AACA;;;AA+CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAbA;AAAA;AAAA;AAwCA;;;;;;;;;;;;;AA/FA;AACA;;;AAGA;AACA;;;;AADA;AAAA;AAAA;AACA;AAKA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;;AADA;AACA;;AAGA;AACA;;AADA;AACA;;AAEA;AACA;;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;AAtCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}